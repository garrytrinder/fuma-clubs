generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Team {
  id                      Int                       @id @default(autoincrement())
  name                    String
  shortName               String
  active                  Boolean                   @default(true)
  recruiting              Boolean                   @default(false)
  discordRoleId           String                    @default("")
  badgeUrl                String?
  description             String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  awayTeamFixtures        Fixture[]                 @relation("awayTeam")
  homeTeamFixtures        Fixture[]                 @relation("homeTeam")
  players                 Player[]
  captains                TeamCaptain[]
  ResultEvent             ResultEvent[]
  ResultMatchStat         ResultMatchStat[]
  ResultPlayerPerformance ResultPlayerPerformance[]
}

model Player {
  id                      Int                       @id @default(autoincrement())
  discordId               String                    @unique
  discordUsername         String                    @unique @default("")
  gamertag                String?                   @unique
  eaId                    String?
  pictureUrl              String?
  kitName                 String?
  youtube                 String?
  twitch                  String?
  country                 Country?                  @relation(fields: [countryId], references: [id])
  countryId               Int?
  platform                Platform?                 @relation(fields: [platformId], references: [id])
  platformId              Int?
  team                    Team?                     @relation(fields: [teamId], references: [id])
  teamId                  Int?
  primaryPosition         Position?                 @relation("primaryPosition", fields: [primaryPositionId], references: [id])
  primaryPositionId       Int?
  secondaryPosition       Position?                 @relation("secondaryPosition", fields: [secondaryPositionId], references: [id])
  secondaryPositionId     Int?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  teamCaptain             TeamCaptain?
  ResultEvent             ResultEvent[]
  ResultPlayerPerformance ResultPlayerPerformance[]
}

model Platform {
  id           Int      @id @default(autoincrement())
  name         String
  discordEmoji String?
  iconClass    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Player       Player[]
}

model Country {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  emoji     String
  Player    Player[]
}

model Tournament {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  fixtures  Fixture[]
  rounds    Round[]   @relation("RoundToTournament")
}

model Round {
  id          Int          @id @default(autoincrement())
  start       DateTime
  end         DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  fixtures    Fixture[]
  tournaments Tournament[] @relation("RoundToTournament")
}

model Fixture {
  id           Int         @id @default(autoincrement())
  homeTeamId   Int
  awayTeamId   Int
  tournamentId Int?
  roundId      Int?
  resultId     Int?        @unique
  awayTeam     Team        @relation("awayTeam", fields: [awayTeamId], references: [id])
  homeTeam     Team        @relation("homeTeam", fields: [homeTeamId], references: [id])
  result       Result?     @relation(fields: [resultId], references: [id])
  round        Round?      @relation(fields: [roundId], references: [id])
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
}

model Result {
  id                      Int                       @id @default(autoincrement())
  homeTeamScore           Int
  awayTeamScore           Int
  afterExtraTime          Boolean                   @default(false)
  penalties               Boolean                   @default(false)
  homeTeamPenalties       Int?
  awayTeamPenalties       Int?
  youtubeLink             String?
  twitchLink              String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  Fixture                 Fixture?
  ResultEvent             ResultEvent[]
  ResultMatchStat         ResultMatchStat[]
  ResultPlayerPerformance ResultPlayerPerformance[]
}

model ResultMatchStat {
  id               Int      @id @default(autoincrement())
  resultId         Int
  teamId           Int
  posession        Int
  ballRecoveryTime Int
  shots            Int
  expectedGoals    Float
  passes           Int
  tackles          Int
  tacklesWon       Int
  interceptions    Int
  saves            Int
  foulsCommitted   Int
  offsides         Int
  corners          Int
  freeKicks        Int
  dribbleSuccess   Int
  shotAccuracy     Int
  passAccuracy     Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  result           Result   @relation(fields: [resultId], references: [id])
  team             Team     @relation(fields: [teamId], references: [id])
}

model ResultEvent {
  id          Int       @id @default(autoincrement())
  minute      Int?
  playerId    Int
  teamId      Int
  resultId    Int
  youtube     String?
  twitch      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  eventTypeId Int
  eventType   EventType @relation(fields: [eventTypeId], references: [id])
  player      Player    @relation(fields: [playerId], references: [id])
  result      Result    @relation(fields: [resultId], references: [id])
  team        Team      @relation(fields: [teamId], references: [id])
}

model EventType {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ResultEvent ResultEvent[]
}

model ResultPlayerPerformance {
  id               Int      @id @default(autoincrement())
  playerId         Int
  teamId           Int
  resultId         Int
  rating           Float?
  goals            Int?
  assists          Int?
  manOfTheMatch    Boolean  @default(false)
  yellowCard       Boolean  @default(false)
  redCard          Boolean  @default(false)
  shots            Int?
  shotAccuracy     Int?
  passes           Int?
  passAccuracy     Int?
  dribbles         Int?
  dribbleSuccess   Int?
  tackles          Int?
  tackleSuccess    Int?
  offsides         Int?
  fouls            Int?
  possessionWon    Int?
  possessionLost   Int?
  distanceCovered  Float?
  distanceSprinted Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  player           Player   @relation(fields: [playerId], references: [id])
  result           Result   @relation(fields: [resultId], references: [id])
  team             Team     @relation(fields: [teamId], references: [id])
}

model TeamCaptain {
  id            Int     @id @default(autoincrement())
  teamId        Int
  playerId      Int     @unique
  isClubCaptain Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id])
}

model Position {
  id                Int               @id @default(autoincrement())
  name              String
  shortName         String
  order             Int?
  category          PositionCategory?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  Formation         Formation[]
  primaryPosition   Player[]          @relation("primaryPosition")
  secondaryPosition Player[]          @relation("secondaryPosition")
}

enum PositionCategory {
  Goalkeeper
  Defender
  Midfielder
  Forward
}

model Formation {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  positions Position[]
}
