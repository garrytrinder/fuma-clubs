generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String
  shortName String
  players   Player[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  homeTeamFixtures        Fixture[]                 @relation("homeTeam")
  awayTeamFixtures        Fixture[]                 @relation("awayTeam")
  ResultPlayerPerformance ResultPlayerPerformance[]
  ResultEvent             ResultEvent[]
  ResultMatchStat         ResultMatchStat[]
}

model Player {
  id Int @id @default(autoincrement())

  discordId       String    @unique
  discordUsername String    @unique @default("")
  platform        Platform? @relation(fields: [platformId], references: [id])
  platformId      Int?
  gamertag        String?   @unique
  eaId            String?

  team Team? @relation(fields: [teamId], references: [id])

  country Country? @relation(fields: [countryId], references: [id])

  youtube String?
  twitch  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teamId    Int?
  countryId Int?

  ResultEvent             ResultEvent[]
  ResultPlayerPerformance ResultPlayerPerformance[]
}

model Platform {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Player    Player[]
}

model Country {
  id    Int    @id @default(autoincrement())
  name  String
  emoji String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Player    Player[]
}

model Tournament {
  id       Int       @id @default(autoincrement())
  name     String
  rounds   Round[]
  fixtures Fixture[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Round {
  id    Int      @id @default(autoincrement())
  start DateTime
  end   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tournaments Tournament[]
  fixtures    Fixture[]
}

model Fixture {
  id Int @id @default(autoincrement())

  homeTeam   Team @relation("homeTeam", fields: [homeTeamId], references: [id])
  homeTeamId Int

  awayTeam   Team @relation("awayTeam", fields: [awayTeamId], references: [id])
  awayTeamId Int

  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId Int?

  round   Round? @relation(fields: [roundId], references: [id])
  roundId Int

  result   Result? @relation(fields: [resultid], references: [id])
  resultid Int?
}

model Result {
  id Int @id @default(autoincrement())

  homeTeamScore Int
  awayTeamScore Int

  afterExtraTime Boolean @default(false)
  penalties      Boolean @default(false)

  homeTeamPenalties Int?
  awayTeamPenalties Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  youtubeLink String?
  twitchLink  String?

  Fixture                 Fixture[]
  ResultEvent             ResultEvent[]
  ResultPlayerPerformance ResultPlayerPerformance[]
  ResultMatchStat         ResultMatchStat[]
}

model ResultMatchStat {
  id Int @id @default(autoincrement())

  result   Result @relation(fields: [resultId], references: [id])
  resultId Int

  team   Team @relation(fields: [teamId], references: [id])
  teamId Int

  posession        Int
  ballRecoveryTime Int
  shots            Int
  expectedGoals    Float
  passes           Int
  tackles          Int
  tacklesWon       Int
  interceptions    Int
  saves            Int
  foulsCommitted   Int
  offsides         Int
  corners          Int
  freeKicks        Int
  dribbleSuccess   Int
  shotAccuracy     Int
  passAccuracy     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResultEvent {
  id Int @id @default(autoincrement())

  eventType EventType @relation(fields: [eventTypeId], references: [id])
  minute    Int?

  player   Player @relation(fields: [playerId], references: [id])
  playerId Int

  team   Team @relation(fields: [teamId], references: [id])
  teamId Int

  result   Result @relation(fields: [resultId], references: [id])
  resultId Int

  youtube String?
  twitch  String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  eventTypeId Int
}

model EventType {
  id   Int    @id @default(autoincrement())
  name String

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ResultEvent ResultEvent[]
}

model ResultPlayerPerformance {
  id Int @id @default(autoincrement())

  player   Player @relation(fields: [playerId], references: [id])
  playerId Int

  team   Team @relation(fields: [teamId], references: [id])
  teamId Int

  result   Result @relation(fields: [resultId], references: [id])
  resultId Int

  rating  Float
  goals   Int
  assists Int

  manOfTheMatch Boolean @default(false)
  yellowCard    Boolean @default(false)
  redCard       Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
