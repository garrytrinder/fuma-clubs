generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Team {
  id                      Int                       @id @default(autoincrement())
  name                    String
  shortName               String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  active                  Boolean                   @default(true)
  recruiting              Boolean                   @default(false)
  discordRoleId           String                    @default("")
  badgeUrl                String?
  description             String?
  awayTeamFixtures        Fixture[]                 @relation("awayTeam")
  homeTeamFixtures        Fixture[]                 @relation("homeTeam")
  players                 Player[]
  ResultEvent             ResultEvent[]
  ResultMatchStat         ResultMatchStat[]
  ResultPlayerPerformance ResultPlayerPerformance[]
  captains                TeamCaptain[]
}

model Player {
  id                      Int                       @id @default(autoincrement())
  discordId               String                    @unique
  gamertag                String?                   @unique
  eaId                    String?
  youtube                 String?
  twitch                  String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  teamId                  Int?
  countryId               Int?
  discordUsername         String                    @unique @default("")
  platformId              Int?
  pictureUrl              String?
  primaryPositionId       Int?
  secondaryPositionId     Int?
  kitName                 String?
  country                 Country?                  @relation(fields: [countryId], references: [id])
  platform                Platform?                 @relation(fields: [platformId], references: [id])
  primaryPosition         Position?                 @relation("primaryPosition", fields: [primaryPositionId], references: [id])
  secondaryPosition       Position?                 @relation("secondaryPosition", fields: [secondaryPositionId], references: [id])
  team                    Team?                     @relation(fields: [teamId], references: [id])
  ResultEvent             ResultEvent[]
  ResultPlayerPerformance ResultPlayerPerformance[]
  teamCaptain             TeamCaptain?
}

model Platform {
  id           Int      @id @default(autoincrement())
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  discordEmoji String?
  iconClass    String?
  Player       Player[]
}

model Country {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  emoji     String
  Player    Player[]
}

model Tournament {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  fixtures  Fixture[]
  rounds    Round[]   @relation("RoundToTournament")
}

model Round {
  id          Int          @id @default(autoincrement())
  start       DateTime
  end         DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  fixtures    Fixture[]
  tournaments Tournament[] @relation("RoundToTournament")
}

model Fixture {
  id           Int         @id @default(autoincrement())
  homeTeamId   Int
  awayTeamId   Int
  tournamentId Int?
  roundId      Int?
  resultId     Int?        @unique
  awayTeam     Team        @relation("awayTeam", fields: [awayTeamId], references: [id])
  homeTeam     Team        @relation("homeTeam", fields: [homeTeamId], references: [id])
  result       Result?     @relation(fields: [resultId], references: [id])
  round        Round?      @relation(fields: [roundId], references: [id])
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
}

model Result {
  id                      Int                       @id @default(autoincrement())
  homeTeamScore           Int
  awayTeamScore           Int
  afterExtraTime          Boolean                   @default(false)
  penalties               Boolean                   @default(false)
  homeTeamPenalties       Int?
  awayTeamPenalties       Int?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  youtubeLink             String?
  twitchLink              String?
  awayTeamHalfTimeScore   Int?
  homeTeamHalfTimeScore   Int?
  recordingAwayGame1      String?
  recordingAwayGame2      String?
  recordingHomeGame1      String?
  recordingHomeGame2      String?
  awayTeamFormationId     Int?
  awayTeamRating          Float?
  homeTeamFormationId     Int?
  homeTeamRating          Float?
  Fixture                 Fixture?
  awayTeamFormation       Formation?                @relation("AwayTeamFormation", fields: [awayTeamFormationId], references: [id])
  homeTeamFormation       Formation?                @relation("HomeTeamFormation", fields: [homeTeamFormationId], references: [id])
  ResultEvent             ResultEvent[]
  ResultMatchStat         ResultMatchStat[]
  ResultPlayerPerformance ResultPlayerPerformance[]
}

model ResultMatchStat {
  id               Int      @id @default(autoincrement())
  resultId         Int
  teamId           Int
  ballRecoveryTime Int?
  shots            Int?
  expectedGoals    Float?
  passes           Int?
  tackles          Int?
  tacklesWon       Int?
  interceptions    Int?
  saves            Int?
  foulsCommitted   Int?
  offsides         Int?
  corners          Int?
  freeKicks        Int?
  dribbleSuccess   Int?
  shotAccuracy     Int?
  passAccuracy     Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  possession       Int?
  result           Result   @relation(fields: [resultId], references: [id])
  team             Team     @relation(fields: [teamId], references: [id])
}

model ResultEvent {
  id          Int       @id @default(autoincrement())
  minute      Int?
  playerId    Int
  teamId      Int
  resultId    Int
  youtube     String?
  twitch      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  eventTypeId Int
  eventType   EventType @relation(fields: [eventTypeId], references: [id])
  player      Player    @relation(fields: [playerId], references: [id])
  result      Result    @relation(fields: [resultId], references: [id])
  team        Team      @relation(fields: [teamId], references: [id])
}

model EventType {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ResultEvent ResultEvent[]
}

model ResultPlayerPerformance {
  id            Int       @id @default(autoincrement())
  playerId      Int
  teamId        Int
  resultId      Int
  rating        Float?
  goals         Int?
  assists       Int?
  manOfTheMatch Boolean   @default(false)
  yellowCard    Boolean   @default(false)
  redCard       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  cleanSheet    Boolean   @default(false)
  ownGoals      Int?
  positionId    Int?
  player        Player    @relation(fields: [playerId], references: [id])
  position      Position? @relation(fields: [positionId], references: [id])
  result        Result    @relation(fields: [resultId], references: [id])
  team          Team      @relation(fields: [teamId], references: [id])
}

model TeamCaptain {
  id            Int      @id @default(autoincrement())
  teamId        Int
  playerId      Int      @unique
  isClubCaptain Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  player        Player   @relation(fields: [playerId], references: [id])
  team          Team     @relation(fields: [teamId], references: [id])
}

model Position {
  id                      Int                       @id @default(autoincrement())
  name                    String
  shortName               String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  category                PositionCategory?
  order                   Int?
  primaryPosition         Player[]                  @relation("primaryPosition")
  secondaryPosition       Player[]                  @relation("secondaryPosition")
  ResultPlayerPerformance ResultPlayerPerformance[]
  Formation               Formation[]               @relation("FormationToPosition")
}

model Formation {
  id                 Int        @id @default(autoincrement())
  name               String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  awayTeamFormations Result[]   @relation("AwayTeamFormation")
  homeTeamFormations Result[]   @relation("HomeTeamFormation")
  positions          Position[] @relation("FormationToPosition")
}

enum PositionCategory {
  Goalkeeper
  Defender
  Midfielder
  Forward
}
